{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\admin\\\\Desktop\\\\\\u0433\\u0440\\u0430\\u0444\\u044B\\\\graph_app\\\\src\\\\components\\\\graph_info\\\\Matrix.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Matrix = ({\n  count\n}) => {\n  _s();\n  const vertexNames = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n\n  // Заголовки столбцов и строк\n  const columnHeaders = vertexNames.slice(0, count);\n  const rowHeaders = [...columnHeaders];\n  console.log(rowHeaders);\n  co;\n  const [data, setData] = useState(Array.from({\n    length: count\n  }, () => Array(count).fill(null)));\n\n  // Обработчик изменения значения в ячейке\n  const handleChange = (rowIndex, colIndex, value) => {\n    const newData = data.map((row, rIdx) => {\n      if (rIdx === rowIndex) {\n        const newRow = [...row];\n        newRow[colIndex] = value;\n        return newRow;\n      }\n      return row;\n    });\n    setData(newData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    border: \"1\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), columnHeaders.map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: header\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: data.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: rowHeaders[rowIndex]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: cell,\n            onChange: e => handleChange(rowIndex, colIndex, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }, this)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this))]\n      }, rowIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(Matrix, \"Fktbqh4SsE5qmZBKpr26OHdCPuE=\");\n_c = Matrix;\nexport default Matrix;\nvar _c;\n$RefreshReg$(_c, \"Matrix\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Matrix","count","_s","vertexNames","columnHeaders","slice","rowHeaders","console","log","co","data","setData","Array","from","length","fill","handleChange","rowIndex","colIndex","value","newData","map","row","rIdx","newRow","border","children","fileName","_jsxFileName","lineNumber","columnNumber","header","index","cell","type","onChange","e","target","_c","$RefreshReg$"],"sources":["D:/Users/admin/Desktop/графы/graph_app/src/components/graph_info/Matrix.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Matrix = ({ count }) => {\r\n  const vertexNames = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\r\n\r\n  // Заголовки столбцов и строк\r\n  const columnHeaders = vertexNames.slice(0, count);\r\n  const rowHeaders = [...columnHeaders];\r\n  console.log(rowHeaders);\r\n\r\n  co\r\n\r\n  const [data, setData] = useState(\r\n    Array.from({ length: count }, () => Array(count).fill(null))\r\n  );\r\n\r\n  // Обработчик изменения значения в ячейке\r\n  const handleChange = (rowIndex, colIndex, value) => {\r\n    const newData = data.map((row, rIdx) => {\r\n      if (rIdx === rowIndex) {\r\n        const newRow = [...row];\r\n        newRow[colIndex] = value;\r\n        return newRow;\r\n      }\r\n      return row;\r\n    });\r\n    setData(newData);\r\n  };\r\n\r\n  return (\r\n    <table border=\"1\">\r\n      <thead>\r\n        <tr>\r\n          <th></th>\r\n          {/* Пустая ячейка для заголовка строки */}\r\n          {columnHeaders.map((header, index) => (\r\n            <th key={index}>{header}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {data.map((row, rowIndex) => (\r\n          <tr key={rowIndex}>\r\n            <td>{rowHeaders[rowIndex]}</td>\r\n            {row.map((cell, colIndex) => (\r\n              <td key={colIndex}>\r\n                <input\r\n                  type=\"text\"\r\n                  value={cell}\r\n                  onChange={(e) =>\r\n                    handleChange(rowIndex, colIndex, e.target.value)\r\n                  }\r\n                />\r\n              </td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Matrix;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}