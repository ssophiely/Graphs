{"ast":null,"code":"export function floyd(data) {\n  console.log(data);\n  data = data.map(кщц => {\n    r.map((v, j) => {\n      if (i == j) return 0;\n      if (v == \"\" || v == 0) return Infinity;\n      return v;\n    });\n  });\n  console.log(data);\n  const n = data.length;\n  let D = Array.from({\n    length: n\n  }, () => Array.from({\n    length: n\n  }, () => Infinity));\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) D[i][j] = 0;else D[i][j] = data[i][j];\n    }\n  }\n  for (let k = 0; k < n; k++) {\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n        D[i][j] = Math.min(D[i][j], D[i][k] + D[k][j]);\n      }\n    }\n  }\n  console.log(D);\n  //   const path = [];\n\n  //   for (let at = end; at !== null; at = previous[at]) {\n  //     path.push(at);\n  //   }\n\n  //   path.reverse();\n\n  //   return [distance[end], path];\n}","map":{"version":3,"names":["floyd","data","console","log","map","кщц","r","v","j","i","Infinity","n","length","D","Array","from","k","Math","min"],"sources":["D:/Users/admin/Desktop/graph_app/src/algorithms/floyd.js"],"sourcesContent":["export function floyd(data) {\r\n  console.log(data);\r\n  data = data.map(кщц => {\r\n    r.map((v, j) => {\r\n      if (i == j) return 0;\r\n      if (v == \"\" || v == 0) return Infinity;\r\n      return v;\r\n    });\r\n  });\r\n  console.log(data)\r\n\r\n  const n = data.length;\r\n  let D = Array.from({ length: n }, () =>\r\n    Array.from({ length: n }, () => Infinity)\r\n  );\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    for (let j = 0; j < n; j++) {\r\n      if (i === j) D[i][j] = 0;\r\n      else D[i][j] = data[i][j];\r\n    }\r\n  }\r\n\r\n  for (let k = 0; k < n; k++) {\r\n    for (let i = 0; i < n; i++) {\r\n      for (let j = 0; j < n; j++) {\r\n        D[i][j] = Math.min(D[i][j], D[i][k] + D[k][j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  console.log(D);\r\n  //   const path = [];\r\n\r\n  //   for (let at = end; at !== null; at = previous[at]) {\r\n  //     path.push(at);\r\n  //   }\r\n\r\n  //   path.reverse();\r\n\r\n  //   return [distance[end], path];\r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,KAAKA,CAACC,IAAI,EAAE;EAC1BC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACjBA,IAAI,GAAGA,IAAI,CAACG,GAAG,CAACC,GAAG,IAAI;IACrBC,CAAC,CAACF,GAAG,CAAC,CAACG,CAAC,EAAEC,CAAC,KAAK;MACd,IAAIC,CAAC,IAAID,CAAC,EAAE,OAAO,CAAC;MACpB,IAAID,CAAC,IAAI,EAAE,IAAIA,CAAC,IAAI,CAAC,EAAE,OAAOG,QAAQ;MACtC,OAAOH,CAAC;IACV,CAAC,CAAC;EACJ,CAAC,CAAC;EACFL,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EAEjB,MAAMU,CAAC,GAAGV,IAAI,CAACW,MAAM;EACrB,IAAIC,CAAC,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEH,MAAM,EAAED;EAAE,CAAC,EAAE,MAChCG,KAAK,CAACC,IAAI,CAAC;IAAEH,MAAM,EAAED;EAAE,CAAC,EAAE,MAAMD,QAAQ,CAC1C,CAAC;EAED,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,CAAC,EAAEF,CAAC,EAAE,EAAE;IAC1B,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,CAAC,EAAEH,CAAC,EAAE,EAAE;MAC1B,IAAIC,CAAC,KAAKD,CAAC,EAAEK,CAAC,CAACJ,CAAC,CAAC,CAACD,CAAC,CAAC,GAAG,CAAC,CAAC,KACpBK,CAAC,CAACJ,CAAC,CAAC,CAACD,CAAC,CAAC,GAAGP,IAAI,CAACQ,CAAC,CAAC,CAACD,CAAC,CAAC;IAC3B;EACF;EAEA,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,CAAC,EAAEK,CAAC,EAAE,EAAE;IAC1B,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,CAAC,EAAEF,CAAC,EAAE,EAAE;MAC1B,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,CAAC,EAAEH,CAAC,EAAE,EAAE;QAC1BK,CAAC,CAACJ,CAAC,CAAC,CAACD,CAAC,CAAC,GAAGS,IAAI,CAACC,GAAG,CAACL,CAAC,CAACJ,CAAC,CAAC,CAACD,CAAC,CAAC,EAAEK,CAAC,CAACJ,CAAC,CAAC,CAACO,CAAC,CAAC,GAAGH,CAAC,CAACG,CAAC,CAAC,CAACR,CAAC,CAAC,CAAC;MAChD;IACF;EACF;EAEAN,OAAO,CAACC,GAAG,CAACU,CAAC,CAAC;EACd;;EAEA;EACA;EACA;;EAEA;;EAEA;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}