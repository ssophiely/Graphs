{"ast":null,"code":"export function findMinPath(data, start, end) {\n  const distance = Array(data.length).fill(Infinity);\n  const visited = Array(data.length).fill(false);\n  const previous = Array(data.length).fill(null);\n  console.log(\"dj\", distance, visited, previous, data);\n  distance[start] = 0;\n  for (let i = 0; i < data.length; i++) {\n    let minDistance = Infinity;\n    let minIndex = -1;\n    for (let j = 0; j < data.length; j++) {\n      if (!visited[j] && distance[j] < minDistance) {\n        minDistance = distance[j];\n        minIndex = j;\n      }\n    }\n    if (minIndex === -1) break;\n    visited[minIndex] = true;\n    for (let k = 0; k < data.length; k++) {\n      if (data[minIndex][k] !== 0 && !visited[k]) {\n        const newDistance = distance[minIndex] + data[minIndex][k];\n        console.log(\"nd\", newDistance, distance[minIndex], data[minIndex][k]);\n        if (newDistance < distance[k]) {\n          distance[k] = newDistance;\n          previous[k] = minIndex;\n        }\n      }\n    }\n  }\n  const path = [];\n  for (let at = end; at !== null; at = previous[at]) {\n    path.push(at);\n  }\n  path.reverse();\n  return [distance[end], path];\n}","map":{"version":3,"names":["findMinPath","data","start","end","distance","Array","length","fill","Infinity","visited","previous","console","log","i","minDistance","minIndex","j","k","newDistance","path","at","push","reverse"],"sources":["D:/Users/admin/Desktop/graph_app/src/algorithms/dijkstra.js"],"sourcesContent":["export function findMinPath(data, start, end) {\r\n  const distance = Array(data.length).fill(Infinity);\r\n  const visited = Array(data.length).fill(false);\r\n  const previous = Array(data.length).fill(null);\r\n  console.log(\"dj\", distance, visited, previous, data);\r\n  distance[start] = 0;\r\n\r\n  for (let i = 0; i < data.length; i++) {\r\n    let minDistance = Infinity;\r\n    let minIndex = -1;\r\n\r\n    for (let j = 0; j < data.length; j++) {\r\n      if (!visited[j] && distance[j] < minDistance) {\r\n        minDistance = distance[j];\r\n        minIndex = j;\r\n      }\r\n    }\r\n\r\n    if (minIndex === -1) break;\r\n\r\n    visited[minIndex] = true;\r\n\r\n    for (let k = 0; k < data.length; k++) {\r\n      if (data[minIndex][k] !== 0 && !visited[k]) {\r\n        const newDistance = distance[minIndex] + data[minIndex][k];\r\n        console.log(\"nd\", newDistance, distance[minIndex], data[minIndex][k])\r\n        if (newDistance < distance[k]) {\r\n          distance[k] = newDistance;\r\n          previous[k] = minIndex;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const path = [];\r\n\r\n  for (let at = end; at !== null; at = previous[at]) {\r\n    path.push(at);\r\n  }\r\n\r\n  path.reverse();\r\n\r\n  return [distance[end], path];\r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,WAAWA,CAACC,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAE;EAC5C,MAAMC,QAAQ,GAAGC,KAAK,CAACJ,IAAI,CAACK,MAAM,CAAC,CAACC,IAAI,CAACC,QAAQ,CAAC;EAClD,MAAMC,OAAO,GAAGJ,KAAK,CAACJ,IAAI,CAACK,MAAM,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;EAC9C,MAAMG,QAAQ,GAAGL,KAAK,CAACJ,IAAI,CAACK,MAAM,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EAC9CI,OAAO,CAACC,GAAG,CAAC,IAAI,EAAER,QAAQ,EAAEK,OAAO,EAAEC,QAAQ,EAAET,IAAI,CAAC;EACpDG,QAAQ,CAACF,KAAK,CAAC,GAAG,CAAC;EAEnB,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,IAAI,CAACK,MAAM,EAAEO,CAAC,EAAE,EAAE;IACpC,IAAIC,WAAW,GAAGN,QAAQ;IAC1B,IAAIO,QAAQ,GAAG,CAAC,CAAC;IAEjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,IAAI,CAACK,MAAM,EAAEU,CAAC,EAAE,EAAE;MACpC,IAAI,CAACP,OAAO,CAACO,CAAC,CAAC,IAAIZ,QAAQ,CAACY,CAAC,CAAC,GAAGF,WAAW,EAAE;QAC5CA,WAAW,GAAGV,QAAQ,CAACY,CAAC,CAAC;QACzBD,QAAQ,GAAGC,CAAC;MACd;IACF;IAEA,IAAID,QAAQ,KAAK,CAAC,CAAC,EAAE;IAErBN,OAAO,CAACM,QAAQ,CAAC,GAAG,IAAI;IAExB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,IAAI,CAACK,MAAM,EAAEW,CAAC,EAAE,EAAE;MACpC,IAAIhB,IAAI,CAACc,QAAQ,CAAC,CAACE,CAAC,CAAC,KAAK,CAAC,IAAI,CAACR,OAAO,CAACQ,CAAC,CAAC,EAAE;QAC1C,MAAMC,WAAW,GAAGd,QAAQ,CAACW,QAAQ,CAAC,GAAGd,IAAI,CAACc,QAAQ,CAAC,CAACE,CAAC,CAAC;QAC1DN,OAAO,CAACC,GAAG,CAAC,IAAI,EAAEM,WAAW,EAAEd,QAAQ,CAACW,QAAQ,CAAC,EAAEd,IAAI,CAACc,QAAQ,CAAC,CAACE,CAAC,CAAC,CAAC;QACrE,IAAIC,WAAW,GAAGd,QAAQ,CAACa,CAAC,CAAC,EAAE;UAC7Bb,QAAQ,CAACa,CAAC,CAAC,GAAGC,WAAW;UACzBR,QAAQ,CAACO,CAAC,CAAC,GAAGF,QAAQ;QACxB;MACF;IACF;EACF;EAEA,MAAMI,IAAI,GAAG,EAAE;EAEf,KAAK,IAAIC,EAAE,GAAGjB,GAAG,EAAEiB,EAAE,KAAK,IAAI,EAAEA,EAAE,GAAGV,QAAQ,CAACU,EAAE,CAAC,EAAE;IACjDD,IAAI,CAACE,IAAI,CAACD,EAAE,CAAC;EACf;EAEAD,IAAI,CAACG,OAAO,CAAC,CAAC;EAEd,OAAO,CAAClB,QAAQ,CAACD,GAAG,CAAC,EAAEgB,IAAI,CAAC;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}