{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\admin\\\\Desktop\\\\graph_app\\\\src\\\\components\\\\graph_info\\\\MatrixComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport Matrix from \"./Matrix.jsx\";\nimport Header from \"./Header.jsx\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MatrixComponent({\n  rowHeaders,\n  setRowHeaders,\n  data,\n  setData,\n  vertexCount,\n  setVertexCount\n}) {\n  _s();\n  const input = useRef();\n  const [columnHeaders, setColumnHeaders] = useState(Array.from({\n    length: vertexCount\n  }, () => \"\"));\n  function handleBlur() {\n    const len = rowHeaders.length;\n    if (rowHeaders[len - 1] === rowHeaders[len - 2]) {\n      newHeaders = [...rowHeaders];\n      newHeaders[len - 1] = \"\";\n      setRowHeaders();\n    }\n  }\n\n  // Обработчик изменения значения в ячейке\n  const handleChange = (rowIndex, colIndex, value) => {\n    const newData = data.map((row, rIdx) => {\n      if (rIdx === rowIndex) {\n        const newRow = [...row];\n        newRow[colIndex] = value;\n        return newRow;\n      }\n      return row;\n    });\n    setData(newData);\n  };\n  function handleClick() {\n    let value = input.current.value;\n    value = value < 2 ? 2 : value;\n    value = value > 10 ? 10 : value;\n    setVertexCount(value);\n    setColumnHeaders(Array.from({\n      length: value\n    }, () => \"\"));\n    setRowHeaders(Array.from({\n      length: value\n    }, () => \"\"));\n    setData(Array.from({\n      length: value\n    }, () => Array.from({\n      length: value\n    }, () => \"\")));\n    input.current.value = value;\n  }\n  function handleDelete(i) {\n    const newRows = rowHeaders.filter(v => v !== rowHeaders[i]);\n    setRowHeaders(newRows);\n    const newCols = columnHeaders.filter(v => v !== columnHeaders[i]);\n    setColumnHeaders(newCols);\n    let newData = data.map(innerArray => innerArray.slice());\n    newData.splice(i, 1);\n    for (let j = 0; j < newData.length; j++) {\n      newData[j].splice(i, 1);\n    }\n    setData(newData);\n  }\n  function handleInsert(i) {\n    console.log(i);\n  }\n  function handleInput(value, index) {\n    const newHeaders = rowHeaders.slice();\n    newHeaders[index] = value;\n    setRowHeaders(newHeaders);\n    setColumnHeaders(newHeaders);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      input: input,\n      vertexCount: vertexCount,\n      onClickHandler: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: \"hr\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Matrix, {\n      columnHeaders: columnHeaders,\n      rowHeaders: rowHeaders,\n      data: data,\n      onChange: handleChange,\n      onInput: handleInput,\n      onDelete: handleDelete,\n      onInsert: handleInsert,\n      onBlur: handleBlur\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(MatrixComponent, \"0aVcXEuwXCjgqXFTNswtTLbDitI=\");\n_c = MatrixComponent;\nvar _c;\n$RefreshReg$(_c, \"MatrixComponent\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Matrix","Header","jsxDEV","_jsxDEV","Fragment","_Fragment","MatrixComponent","rowHeaders","setRowHeaders","data","setData","vertexCount","setVertexCount","_s","input","columnHeaders","setColumnHeaders","Array","from","length","handleBlur","len","newHeaders","handleChange","rowIndex","colIndex","value","newData","map","row","rIdx","newRow","handleClick","current","handleDelete","i","newRows","filter","v","newCols","innerArray","slice","splice","j","handleInsert","console","log","handleInput","index","children","onClickHandler","fileName","_jsxFileName","lineNumber","columnNumber","className","onChange","onInput","onDelete","onInsert","onBlur","_c","$RefreshReg$"],"sources":["D:/Users/admin/Desktop/graph_app/src/components/graph_info/MatrixComponent.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport Matrix from \"./Matrix.jsx\";\r\nimport Header from \"./Header.jsx\";\r\n\r\nexport default function MatrixComponent({\r\n  rowHeaders,\r\n  setRowHeaders,\r\n  data,\r\n  setData,\r\n  vertexCount,\r\n  setVertexCount,\r\n}) {\r\n  const input = useRef();\r\n\r\n  const [columnHeaders, setColumnHeaders] = useState(\r\n    Array.from({ length: vertexCount }, () => \"\")\r\n  );\r\n\r\n  function handleBlur() {\r\n    const len = rowHeaders.length;\r\n    if (rowHeaders[len - 1] === rowHeaders[len - 2]) {\r\n      newHeaders = [...rowHeaders];\r\n      newHeaders[len - 1] = \"\";\r\n      setRowHeaders()\r\n    }\r\n  }\r\n\r\n  // Обработчик изменения значения в ячейке\r\n  const handleChange = (rowIndex, colIndex, value) => {\r\n    const newData = data.map((row, rIdx) => {\r\n      if (rIdx === rowIndex) {\r\n        const newRow = [...row];\r\n        newRow[colIndex] = value;\r\n        return newRow;\r\n      }\r\n      return row;\r\n    });\r\n    setData(newData);\r\n  };\r\n\r\n  function handleClick() {\r\n    let value = input.current.value;\r\n    value = value < 2 ? 2 : value;\r\n    value = value > 10 ? 10 : value;\r\n\r\n    setVertexCount(value);\r\n    setColumnHeaders(Array.from({ length: value }, () => \"\"));\r\n    setRowHeaders(Array.from({ length: value }, () => \"\"));\r\n    setData(\r\n      Array.from({ length: value }, () =>\r\n        Array.from({ length: value }, () => \"\")\r\n      )\r\n    );\r\n\r\n    input.current.value = value;\r\n  }\r\n\r\n  function handleDelete(i) {\r\n    const newRows = rowHeaders.filter((v) => v !== rowHeaders[i]);\r\n    setRowHeaders(newRows);\r\n\r\n    const newCols = columnHeaders.filter((v) => v !== columnHeaders[i]);\r\n    setColumnHeaders(newCols);\r\n\r\n    let newData = data.map((innerArray) => innerArray.slice());\r\n    newData.splice(i, 1);\r\n    for (let j = 0; j < newData.length; j++) {\r\n      newData[j].splice(i, 1);\r\n    }\r\n    setData(newData);\r\n  }\r\n\r\n  function handleInsert(i) {\r\n    console.log(i);\r\n  }\r\n\r\n  function handleInput(value, index) {\r\n    const newHeaders = rowHeaders.slice();\r\n    newHeaders[index] = value;\r\n    setRowHeaders(newHeaders);\r\n    setColumnHeaders(newHeaders);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header\r\n        input={input}\r\n        vertexCount={vertexCount}\r\n        onClickHandler={handleClick}\r\n      />\r\n      <hr className=\"hr\" />\r\n      <Matrix\r\n        columnHeaders={columnHeaders}\r\n        rowHeaders={rowHeaders}\r\n        data={data}\r\n        onChange={handleChange}\r\n        onInput={handleInput}\r\n        onDelete={handleDelete}\r\n        onInsert={handleInsert}\r\n        onBlur={handleBlur}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}