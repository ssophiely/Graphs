{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\admin\\\\Desktop\\\\\\u0433\\u0440\\u0430\\u0444\\u044B\\\\graph_app\\\\src\\\\components\\\\matrix\\\\Mat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n\n// export default function Math({ count }) {\n//   console.log(count);\n//   return <h1>{count}</h1>;\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditableTable = ({\n  count\n}) => {\n  _s();\n  // Начальные данные для таблицы\n  const initialData = [['Row 1 Col 1', 'Row 1 Col 2', 'Row 1 Col 3'], ['Row 2 Col 1', 'Row 2 Col 2', 'Row 2 Col 3'], ['Row 3 Col 1', 'Row 3 Col 2', 'Row 3 Col 3']];\n  const vertexNames = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n\n  // Заголовки столбцов и строк\n  const columnHeaders = vertexNames.slice(0, count);\n  const rowHeaders = [...columnHeaders];\n  const [data, setData] = useState(initialData);\n\n  // Обработчик изменения значения в ячейке\n  const handleChange = (rowIndex, colIndex, value) => {\n    const newData = data.map((row, rIdx) => {\n      if (rIdx === rowIndex) {\n        const newRow = [...row];\n        newRow[colIndex] = value;\n        return newRow;\n      }\n      return row;\n    });\n    setData(newData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    border: \"1\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), columnHeaders.map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: header\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: data.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: rowHeaders[rowIndex]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: cell,\n            onChange: e => handleChange(rowIndex, colIndex, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 17\n          }, this)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this))]\n      }, rowIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(EditableTable, \"hDGcfQHkZj5ZsEBk8saO8jx9VfY=\");\n_c = EditableTable;\nexport default EditableTable;\nvar _c;\n$RefreshReg$(_c, \"EditableTable\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","EditableTable","count","_s","initialData","vertexNames","columnHeaders","slice","rowHeaders","data","setData","handleChange","rowIndex","colIndex","value","newData","map","row","rIdx","newRow","border","children","fileName","_jsxFileName","lineNumber","columnNumber","header","index","cell","type","onChange","e","target","_c","$RefreshReg$"],"sources":["D:/Users/admin/Desktop/графы/graph_app/src/components/matrix/Mat.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// export default function Math({ count }) {\r\n//   console.log(count);\r\n//   return <h1>{count}</h1>;\r\n// }\r\n\r\nconst EditableTable = ({count}) => {\r\n  // Начальные данные для таблицы\r\n  const initialData = [\r\n    ['Row 1 Col 1', 'Row 1 Col 2', 'Row 1 Col 3'],\r\n    ['Row 2 Col 1', 'Row 2 Col 2', 'Row 2 Col 3'],\r\n    ['Row 3 Col 1', 'Row 3 Col 2', 'Row 3 Col 3'],\r\n  ];\r\n\r\n  const vertexNames = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"]\r\n\r\n  // Заголовки столбцов и строк\r\n  const columnHeaders = vertexNames.slice(0, count);\r\n  const rowHeaders = [...columnHeaders];\r\n\r\n  const [data, setData] = useState(initialData);\r\n\r\n  // Обработчик изменения значения в ячейке\r\n  const handleChange = (rowIndex, colIndex, value) => {\r\n    const newData = data.map((row, rIdx) => {\r\n      if (rIdx === rowIndex) {\r\n        const newRow = [...row];\r\n        newRow[colIndex] = value;\r\n        return newRow;\r\n      }\r\n      return row;\r\n    });\r\n    setData(newData);\r\n  };\r\n\r\n  return (\r\n    <table border=\"1\">\r\n      <thead>\r\n        <tr>\r\n          <th></th>{/* Пустая ячейка для заголовка строки */}\r\n          {columnHeaders.map((header, index) => (\r\n            <th key={index}>{header}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {data.map((row, rowIndex) => (\r\n          <tr key={rowIndex}>\r\n            <td>{rowHeaders[rowIndex]}</td>\r\n            {row.map((cell, colIndex) => (\r\n              <td key={colIndex}>\r\n                <input\r\n                  type=\"text\"\r\n                  value={cell}\r\n                  onChange={(e) => handleChange(rowIndex, colIndex, e.target.value)}\r\n                />\r\n              </td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default EditableTable;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}