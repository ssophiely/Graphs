{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\admin\\\\Desktop\\\\graph_app\\\\src\\\\components\\\\graph\\\\GraphComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { generateCoordinates } from \"../../funcs/generateCoords\";\nimport VertexContextMenu from \"./VertexContextMenu.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GraphComponent({\n  headers,\n  setHeaders,\n  inpData,\n  start,\n  end,\n  setStart,\n  setEnd,\n  setDeleted,\n  setInserted\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [selectedVertex, setSelectedVertex] = useState(null);\n  const [vertexes, setVertexes] = useState([]);\n  const [offset, setOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [names, setNames] = useState(headers);\n  const [data, setData] = useState(inpData);\n  const [context, setContext] = React.useState(false);\n  const [xyPosition, setxyPosition] = React.useState({\n    x: 0,\n    y: 0\n  });\n  const [clickedVertex, setClickedVertex] = useState(null);\n  const [menuOn, setMenuOn] = useState(true);\n\n  // контекстное меню\n  const showContext = (event, y) => {\n    setContext(false);\n    const positionChange = {\n      x: event.pageX,\n      y: event.pageY\n    };\n    setxyPosition(positionChange);\n    setContext(true);\n  };\n  const hideContext = event => {\n    setContext(false);\n  };\n  function handleClick(e) {\n    e.preventDefault();\n    const mousePos = getMousePos(canvasRef.current, e);\n    const clickedCircle = vertexes.find(circle => {\n      return (mousePos.x - circle.x) ** 2 + (mousePos.y - circle.y) ** 2 <= circle.radius ** 2;\n    });\n    if (clickedCircle) {\n      if (!menuOn) {\n        hideContext(e);\n        setMenuOn(true);\n        return;\n      }\n      setClickedVertex(clickedCircle);\n      showContext(e);\n    } else {\n      hideContext(e);\n      setMenuOn(true);\n    }\n  }\n\n  // выбор вершины начальной\n  const handleStart = () => {\n    setVertexes(vertexes.map(v => {\n      if (v.label === clickedVertex.label) {\n        if (v.label === end) {\n          setEnd(\"\");\n        }\n        setStart(v.label);\n        return {\n          ...v,\n          fillStyle: \"green\"\n        };\n      }\n      if (v.label === end) {\n        return {\n          ...v,\n          fillStyle: \"red\"\n        };\n      }\n      return {\n        ...v,\n        fillStyle: \"blue\"\n      };\n    }));\n  };\n\n  // выбор вершины конечной\n  const handleEnd = () => {\n    setVertexes(vertexes.map(v => {\n      if (v.label === clickedVertex.label) {\n        if (v.label === start) {\n          setStart(\"\");\n        }\n        setEnd(v.label);\n        return {\n          ...v,\n          fillStyle: \"red\"\n        };\n      }\n      if (v.label === start) {\n        return {\n          ...v,\n          fillStyle: \"green\"\n        };\n      }\n      return {\n        ...v,\n        fillStyle: \"blue\"\n      };\n    }));\n  };\n\n  // удаление вершины\n  const removeVertex = () => {\n    const h = headers.map(x => {\n      if (x === clickedVertex.label) return \"\";else return x;\n    });\n    setHeaders(h);\n    setDeleted(clickedVertex.id);\n    setTimeout(() => {\n      setDeleted(null);\n    }, 500);\n    console.log(clickedVertex.id);\n    if (clickedVertex.label === start) setStart(\"\");\n    if (clickedVertex.label === end) setEnd(\"\");\n  };\n\n  // рисуем круг\n  const drawCircle = (vert, ctx) => {\n    ctx.beginPath();\n    ctx.arc(vert.x, vert.y, 20, 0, Math.PI * 2);\n    ctx.fillStyle = vert.fillStyle;\n    ctx.lineWidth = 2;\n    ctx.fill();\n    ctx.fillStyle = \"black\";\n    ctx.font = \"13px Serif\";\n    ctx.fillText(vert.label, vert.x - 25, vert.y - vert.radius - 4);\n    ctx.closePath();\n  };\n\n  // рисуем стрелку\n  const drawArrow = (circle1, circle2, weight, ctx) => {\n    if (weight === 0) {\n      return;\n    }\n    if (circle1 && circle2) {\n      const dx = circle2.x - circle1.x;\n      const dy = circle2.y - circle1.y;\n      const angle = Math.atan2(dy, dx);\n\n      // Позиции конечных точек стрелки\n      const startX = circle1.x + Math.cos(angle) * circle1.radius;\n      const startY = circle1.y + Math.sin(angle) * circle1.radius;\n      const endX = circle2.x - Math.cos(angle) * circle2.radius;\n      const endY = circle2.y - Math.sin(angle) * circle2.radius;\n\n      // Рисуем дугу\n      ctx.beginPath();\n      ctx.strokeStyle = \"grey\";\n      ctx.moveTo(startX, startY);\n      ctx.quadraticCurveTo((startX + endX) / 2, startY, endX, endY); // искажение для формирования дуги\n      ctx.stroke();\n\n      // Рисуем стрелку\n      const arrowSize = 15;\n      ctx.save();\n      ctx.translate(endX, endY);\n      ctx.rotate(angle);\n      ctx.beginPath();\n      ctx.moveTo(-arrowSize, -arrowSize / 2);\n      ctx.lineTo(0, 0);\n      ctx.lineTo(-arrowSize, arrowSize / 2);\n      ctx.fillStyle = \"grey\";\n      ctx.fill();\n      ctx.restore();\n      ctx.font = \"bold 25px Serif\";\n      ctx.fillStyle = \"#FF8C00\";\n      const toX = circle2.x + 100 * Math.cos(angle);\n      const toY = circle2.y + 100 * Math.sin(angle);\n      const midWeightX = (circle1.x + toX) / 2 + (circle1.y - circle2.y) / 10;\n      const midWeightY = (circle1.y + toY) / 2 + (circle2.x - circle1.x) / 10;\n      ctx.fillText(weight, midWeightX, midWeightY);\n    }\n  };\n  useEffect(() => {\n    if (headers.length !== names.length) {\n      let newVertexes = headers.map((h, ind) => {\n        if (h !== \"\") {\n          const vertex = vertexes.find(v => v.label === h);\n          if (vertex) {\n            vertex.id = ind;\n            return vertex;\n          }\n          if (!names.includes(h)) {\n            let [xc, yc] = generateCoordinates(canvasRef.current, vertexes);\n            return {\n              label: h,\n              x: xc,\n              y: yc,\n              radius: 20,\n              id: ind,\n              fillStyle: \"blue\"\n            };\n          }\n        }\n        return null;\n      });\n      setNames(headers);\n      setVertexes(newVertexes.filter(el => el !== null));\n      return;\n    }\n    let newVertexes = headers.map((h, ind) => {\n      if (h !== \"\") {\n        const vertex = vertexes.find(v => v.id === ind);\n        if (vertex) {\n          vertex.label = h;\n          return vertex;\n        }\n        let [xc, yc] = generateCoordinates(canvasRef.current, vertexes);\n        return {\n          label: h,\n          x: xc,\n          y: yc,\n          radius: 20,\n          id: ind,\n          fillStyle: \"blue\"\n        };\n      }\n      return null;\n    });\n    setVertexes(newVertexes.filter(el => el !== null));\n    setNames(headers);\n  }, [headers]);\n\n  // поменяли веса в таблице\n  useEffect(() => {\n    setData(inpData);\n    canvasRef.current.getContext(\"2d\").clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    vertexes.forEach(item => {\n      drawCircle(item, canvasRef.current.getContext(\"2d\"));\n    });\n    for (let i = 0; i < inpData.length; i++) {\n      for (let j = 0; j < inpData[i].length; j++) {\n        const circle1 = vertexes.find(v => v.id === i);\n        const circle2 = vertexes.find(v => v.id === j);\n        const weight = parseInt(inpData[i][j]) ? parseInt(inpData[i][j]) : 0;\n        drawArrow(circle1, circle2, weight, canvasRef.current.getContext(\"2d\"));\n      }\n    }\n  }, [inpData]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    vertexes.forEach(item => {\n      drawCircle(item, ctx);\n    });\n    for (let i = 0; i < (data === null || data === void 0 ? void 0 : data.length); i++) {\n      for (let j = 0; j < ((_data$i = data[i]) === null || _data$i === void 0 ? void 0 : _data$i.length); j++) {\n        var _data$i;\n        const circle1 = vertexes.find(v => v.id === i);\n        const circle2 = vertexes.find(v => v.id === j);\n        const weight = parseInt(data[i][j]) ? parseInt(data[i][j]) : 0;\n        drawArrow(circle1, circle2, weight, canvasRef.current.getContext(\"2d\"));\n      }\n    }\n  }, [vertexes]);\n  const handleMouseUp = () => {\n    setIsDragging(false);\n    setSelectedVertex(null);\n  };\n  const handleMouseDown = e => {\n    const mousePos = getMousePos(canvasRef.current, e);\n    const clickedCircle = vertexes.find(circle => {\n      return (mousePos.x - circle.x) ** 2 + (mousePos.y - circle.y) ** 2 <= circle.radius ** 2;\n    });\n    if (clickedCircle) {\n      setIsDragging(true);\n      setSelectedVertex(clickedCircle);\n      setOffset({\n        x: mousePos.x - clickedCircle.x,\n        y: mousePos.y - clickedCircle.y\n      });\n    }\n  };\n  const handleMouseMove = e => {\n    if (isDragging && selectedVertex) {\n      setMenuOn(false);\n      const mousePos = getMousePos(canvasRef.current, e);\n      const newCircles = vertexes.map(circle => {\n        if (circle.label === selectedVertex.label) {\n          const newX = mousePos.x - offset.x;\n          const newY = mousePos.y - offset.y;\n          // Проверка границ\n          const radius = circle.radius;\n          if (newX - radius < 0) return {\n            ...circle,\n            x: radius\n          };\n          if (newY - radius < 0) return {\n            ...circle,\n            y: radius\n          };\n          if (newX + radius > canvasRef.current.width) return {\n            ...circle,\n            x: canvasRef.current.width - radius\n          };\n          if (newY + radius > canvasRef.current.height) return {\n            ...circle,\n            y: canvasRef.current.height - radius\n          };\n          return {\n            ...circle,\n            x: newX,\n            y: newY\n          };\n        }\n        return circle;\n      });\n      setVertexes(newCircles);\n    }\n  };\n  const getMousePos = (canvas, evt) => {\n    const rect = canvas.getBoundingClientRect();\n    return {\n      x: evt.clientX - rect.left,\n      y: evt.clientY - rect.top\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: \"880\",\n      height: \"600\",\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      onContextMenu: e => handleClick(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VertexContextMenu, {\n      context: context,\n      xyPosition: xyPosition,\n      setContext: setContext,\n      del: vertexes.length > 2,\n      addArc: false,\n      onStart: handleStart,\n      onEnd: handleEnd,\n      onDelete: removeVertex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 331,\n    columnNumber: 5\n  }, this);\n}\n_s(GraphComponent, \"+6QM2cREbTzWP7im/xO/8OGtFAk=\");\n_c = GraphComponent;\nvar _c;\n$RefreshReg$(_c, \"GraphComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","generateCoordinates","VertexContextMenu","jsxDEV","_jsxDEV","GraphComponent","headers","setHeaders","inpData","start","end","setStart","setEnd","setDeleted","setInserted","_s","canvasRef","isDragging","setIsDragging","selectedVertex","setSelectedVertex","vertexes","setVertexes","offset","setOffset","x","y","names","setNames","data","setData","context","setContext","xyPosition","setxyPosition","clickedVertex","setClickedVertex","menuOn","setMenuOn","showContext","event","positionChange","pageX","pageY","hideContext","handleClick","e","preventDefault","mousePos","getMousePos","current","clickedCircle","find","circle","radius","handleStart","map","v","label","fillStyle","handleEnd","removeVertex","h","id","setTimeout","console","log","drawCircle","vert","ctx","beginPath","arc","Math","PI","lineWidth","fill","font","fillText","closePath","drawArrow","circle1","circle2","weight","dx","dy","angle","atan2","startX","cos","startY","sin","endX","endY","strokeStyle","moveTo","quadraticCurveTo","stroke","arrowSize","save","translate","rotate","lineTo","restore","toX","toY","midWeightX","midWeightY","length","newVertexes","ind","vertex","includes","xc","yc","filter","el","getContext","clearRect","width","height","forEach","item","i","j","parseInt","canvas","_data$i","handleMouseUp","handleMouseDown","handleMouseMove","newCircles","newX","newY","evt","rect","getBoundingClientRect","clientX","left","clientY","top","children","ref","onMouseDown","onMouseMove","onMouseUp","onContextMenu","fileName","_jsxFileName","lineNumber","columnNumber","del","addArc","onStart","onEnd","onDelete","_c","$RefreshReg$"],"sources":["D:/Users/admin/Desktop/graph_app/src/components/graph/GraphComponent.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { generateCoordinates } from \"../../funcs/generateCoords\";\r\nimport VertexContextMenu from \"./VertexContextMenu.jsx\";\r\n\r\nexport default function GraphComponent({\r\n  headers,\r\n  setHeaders,\r\n  inpData,\r\n  start,\r\n  end,\r\n  setStart,\r\n  setEnd,\r\n  setDeleted,\r\n  setInserted,\r\n}) {\r\n  const canvasRef = useRef(null);\r\n\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [selectedVertex, setSelectedVertex] = useState(null);\r\n  const [vertexes, setVertexes] = useState([]);\r\n  const [offset, setOffset] = useState({ x: 0, y: 0 });\r\n  const [names, setNames] = useState(headers);\r\n  const [data, setData] = useState(inpData);\r\n\r\n  const [context, setContext] = React.useState(false);\r\n  const [xyPosition, setxyPosition] = React.useState({ x: 0, y: 0 });\r\n  const [clickedVertex, setClickedVertex] = useState(null);\r\n  const [menuOn, setMenuOn] = useState(true);\r\n\r\n  // контекстное меню\r\n  const showContext = (event, y) => {\r\n    setContext(false);\r\n    const positionChange = {\r\n      x: event.pageX,\r\n      y: event.pageY,\r\n    };\r\n    setxyPosition(positionChange);\r\n    setContext(true);\r\n  };\r\n\r\n  const hideContext = (event) => {\r\n    setContext(false);\r\n  };\r\n\r\n  function handleClick(e) {\r\n    e.preventDefault();\r\n    const mousePos = getMousePos(canvasRef.current, e);\r\n    const clickedCircle = vertexes.find((circle) => {\r\n      return (\r\n        (mousePos.x - circle.x) ** 2 + (mousePos.y - circle.y) ** 2 <=\r\n        circle.radius ** 2\r\n      );\r\n    });\r\n    if (clickedCircle) {\r\n      if (!menuOn) {\r\n        hideContext(e);\r\n        setMenuOn(true);\r\n        return;\r\n      }\r\n      setClickedVertex(clickedCircle);\r\n      showContext(e);\r\n    } else {\r\n      hideContext(e);\r\n      setMenuOn(true);\r\n    }\r\n  }\r\n\r\n  // выбор вершины начальной\r\n  const handleStart = () => {\r\n    setVertexes(\r\n      vertexes.map((v) => {\r\n        if (v.label === clickedVertex.label) {\r\n          if (v.label === end) {\r\n            setEnd(\"\");\r\n          }\r\n          setStart(v.label);\r\n          return { ...v, fillStyle: \"green\" };\r\n        }\r\n        if (v.label === end) {\r\n          return { ...v, fillStyle: \"red\" };\r\n        }\r\n        return { ...v, fillStyle: \"blue\" };\r\n      })\r\n    );\r\n  };\r\n\r\n  // выбор вершины конечной\r\n  const handleEnd = () => {\r\n    setVertexes(\r\n      vertexes.map((v) => {\r\n        if (v.label === clickedVertex.label) {\r\n          if (v.label === start) {\r\n            setStart(\"\");\r\n          }\r\n          setEnd(v.label);\r\n          return { ...v, fillStyle: \"red\" };\r\n        }\r\n        if (v.label === start) {\r\n          return { ...v, fillStyle: \"green\" };\r\n        }\r\n        return { ...v, fillStyle: \"blue\" };\r\n      })\r\n    );\r\n  };\r\n\r\n  // удаление вершины\r\n  const removeVertex = () => {\r\n    const h = headers.map((x) => {\r\n      if (x === clickedVertex.label) return \"\";\r\n      else return x;\r\n    });\r\n    setHeaders(h);\r\n    setDeleted(clickedVertex.id);\r\n    setTimeout(() => {\r\n      setDeleted(null);\r\n    }, 500);\r\n    console.log(clickedVertex.id);\r\n    if (clickedVertex.label === start) setStart(\"\");\r\n    if (clickedVertex.label === end) setEnd(\"\");\r\n  };\r\n\r\n  // рисуем круг\r\n  const drawCircle = (vert, ctx) => {\r\n    ctx.beginPath();\r\n    ctx.arc(vert.x, vert.y, 20, 0, Math.PI * 2);\r\n    ctx.fillStyle = vert.fillStyle;\r\n    ctx.lineWidth = 2;\r\n    ctx.fill();\r\n\r\n    ctx.fillStyle = \"black\";\r\n    ctx.font = \"13px Serif\";\r\n    ctx.fillText(vert.label, vert.x - 25, vert.y - vert.radius - 4);\r\n    ctx.closePath();\r\n  };\r\n\r\n  // рисуем стрелку\r\n  const drawArrow = (circle1, circle2, weight, ctx) => {\r\n    if (weight === 0) {\r\n      return;\r\n    }\r\n    if (circle1 && circle2) {\r\n      const dx = circle2.x - circle1.x;\r\n      const dy = circle2.y - circle1.y;\r\n      const angle = Math.atan2(dy, dx);\r\n\r\n      // Позиции конечных точек стрелки\r\n      const startX = circle1.x + Math.cos(angle) * circle1.radius;\r\n      const startY = circle1.y + Math.sin(angle) * circle1.radius;\r\n      const endX = circle2.x - Math.cos(angle) * circle2.radius;\r\n      const endY = circle2.y - Math.sin(angle) * circle2.radius;\r\n\r\n      // Рисуем дугу\r\n      ctx.beginPath();\r\n      ctx.strokeStyle = \"grey\";\r\n      ctx.moveTo(startX, startY);\r\n      ctx.quadraticCurveTo((startX + endX) / 2, startY, endX, endY); // искажение для формирования дуги\r\n      ctx.stroke();\r\n\r\n      // Рисуем стрелку\r\n      const arrowSize = 15;\r\n      ctx.save();\r\n      ctx.translate(endX, endY);\r\n      ctx.rotate(angle);\r\n      ctx.beginPath();\r\n      ctx.moveTo(-arrowSize, -arrowSize / 2);\r\n      ctx.lineTo(0, 0);\r\n      ctx.lineTo(-arrowSize, arrowSize / 2);\r\n      ctx.fillStyle = \"grey\";\r\n      ctx.fill();\r\n      ctx.restore();\r\n\r\n      ctx.font = \"bold 25px Serif\";\r\n      ctx.fillStyle = \"#FF8C00\";\r\n\r\n      const toX = circle2.x + 100 * Math.cos(angle);\r\n      const toY = circle2.y + 100 * Math.sin(angle);\r\n      const midWeightX = (circle1.x + toX) / 2 + (circle1.y - circle2.y) / 10;\r\n      const midWeightY = (circle1.y + toY) / 2 + (circle2.x - circle1.x) / 10;\r\n      ctx.fillText(weight, midWeightX, midWeightY);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (headers.length !== names.length) {\r\n      let newVertexes = headers.map((h, ind) => {\r\n        if (h !== \"\") {\r\n          const vertex = vertexes.find((v) => v.label === h);\r\n          if (vertex) {\r\n            vertex.id = ind;\r\n            return vertex;\r\n          }\r\n          if (!names.includes(h)) {\r\n            let [xc, yc] = generateCoordinates(canvasRef.current, vertexes);\r\n            return {\r\n              label: h,\r\n              x: xc,\r\n              y: yc,\r\n              radius: 20,\r\n              id: ind,\r\n              fillStyle: \"blue\",\r\n            };\r\n          }\r\n        }\r\n        return null;\r\n      });\r\n      setNames(headers);\r\n      setVertexes(newVertexes.filter((el) => el !== null));\r\n      return;\r\n    }\r\n\r\n    let newVertexes = headers.map((h, ind) => {\r\n      if (h !== \"\") {\r\n        const vertex = vertexes.find((v) => v.id === ind);\r\n        if (vertex) {\r\n          vertex.label = h;\r\n          return vertex;\r\n        }\r\n        let [xc, yc] = generateCoordinates(canvasRef.current, vertexes);\r\n        return {\r\n          label: h,\r\n          x: xc,\r\n          y: yc,\r\n          radius: 20,\r\n          id: ind,\r\n          fillStyle: \"blue\",\r\n        };\r\n      }\r\n      return null;\r\n    });\r\n    setVertexes(newVertexes.filter((el) => el !== null));\r\n    setNames(headers);\r\n  }, [headers]);\r\n\r\n  // поменяли веса в таблице\r\n  useEffect(() => {\r\n    setData(inpData);\r\n\r\n    canvasRef.current\r\n      .getContext(\"2d\")\r\n      .clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n    vertexes.forEach((item) => {\r\n      drawCircle(item, canvasRef.current.getContext(\"2d\"));\r\n    });\r\n\r\n    for (let i = 0; i < inpData.length; i++) {\r\n      for (let j = 0; j < inpData[i].length; j++) {\r\n        const circle1 = vertexes.find((v) => v.id === i);\r\n        const circle2 = vertexes.find((v) => v.id === j);\r\n        const weight = parseInt(inpData[i][j]) ? parseInt(inpData[i][j]) : 0;\r\n        drawArrow(circle1, circle2, weight, canvasRef.current.getContext(\"2d\"));\r\n      }\r\n    }\r\n  }, [inpData]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    vertexes.forEach((item) => {\r\n      drawCircle(item, ctx);\r\n    });\r\n    for (let i = 0; i < data?.length; i++) {\r\n      for (let j = 0; j < data[i]?.length; j++) {\r\n        const circle1 = vertexes.find((v) => v.id === i);\r\n        const circle2 = vertexes.find((v) => v.id === j);\r\n        const weight = parseInt(data[i][j]) ? parseInt(data[i][j]) : 0;\r\n        drawArrow(circle1, circle2, weight, canvasRef.current.getContext(\"2d\"));\r\n      }\r\n    }\r\n  }, [vertexes]);\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDragging(false);\r\n    setSelectedVertex(null);\r\n  };\r\n\r\n  const handleMouseDown = (e) => {\r\n    const mousePos = getMousePos(canvasRef.current, e);\r\n    const clickedCircle = vertexes.find((circle) => {\r\n      return (\r\n        (mousePos.x - circle.x) ** 2 + (mousePos.y - circle.y) ** 2 <=\r\n        circle.radius ** 2\r\n      );\r\n    });\r\n    if (clickedCircle) {\r\n      setIsDragging(true);\r\n      setSelectedVertex(clickedCircle);\r\n      setOffset({\r\n        x: mousePos.x - clickedCircle.x,\r\n        y: mousePos.y - clickedCircle.y,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (isDragging && selectedVertex) {\r\n      setMenuOn(false);\r\n      const mousePos = getMousePos(canvasRef.current, e);\r\n      const newCircles = vertexes.map((circle) => {\r\n        if (circle.label === selectedVertex.label) {\r\n          const newX = mousePos.x - offset.x;\r\n          const newY = mousePos.y - offset.y;\r\n          // Проверка границ\r\n          const radius = circle.radius;\r\n          if (newX - radius < 0) return { ...circle, x: radius };\r\n          if (newY - radius < 0) return { ...circle, y: radius };\r\n          if (newX + radius > canvasRef.current.width)\r\n            return { ...circle, x: canvasRef.current.width - radius };\r\n          if (newY + radius > canvasRef.current.height)\r\n            return { ...circle, y: canvasRef.current.height - radius };\r\n\r\n          return { ...circle, x: newX, y: newY };\r\n        }\r\n        return circle;\r\n      });\r\n\r\n      setVertexes(newCircles);\r\n    }\r\n  };\r\n\r\n  const getMousePos = (canvas, evt) => {\r\n    const rect = canvas.getBoundingClientRect();\r\n    return {\r\n      x: evt.clientX - rect.left,\r\n      y: evt.clientY - rect.top,\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <canvas\r\n        ref={canvasRef}\r\n        width=\"880\"\r\n        height=\"600\"\r\n        onMouseDown={handleMouseDown}\r\n        onMouseMove={handleMouseMove}\r\n        onMouseUp={handleMouseUp}\r\n        onContextMenu={(e) => handleClick(e)}\r\n      />\r\n      <VertexContextMenu\r\n        context={context}\r\n        xyPosition={xyPosition}\r\n        setContext={setContext}\r\n        del={vertexes.length > 2}\r\n        addArc={false}\r\n        onStart={handleStart}\r\n        onEnd={handleEnd}\r\n        onDelete={removeVertex}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}