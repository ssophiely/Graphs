{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\admin\\\\Desktop\\\\graph_app\\\\src\\\\components\\\\graph\\\\GraphComponent.jsx\",\n  _s = $RefreshSig$();\n// import { Graph } from \"react-d3-graph\";\n\n// function GraphComponent() {\n//   const data = {\n//     nodes: [{ id: \"Harry\" }, { id: \"Sally\" }, { id: \"Alice\" }],\n//     links: [\n//       { source: \"Harry\", target: \"Sally\", weight: 5 , ma},\n//       { source: \"Harry\", target: \"Alice\" },\n//       { source: \"Sally\", target: \"Harry\", weight: 5 },\n//     ],\n//   };\n\n//   // the graph configuration, just override the ones you need\n//   const myConfig = {\n//     nodeHighlightBehavior: true,\n//     node: {\n//       color: \"black\",\n//       size: 220,\n//       highlightStrokeColor: \"red\",\n//     },\n//     link: {\n//       highlightColor: \"yellow\",\n//       renderLabel: true,\n//       labelProperty: \"weight\",\n//       markerHeight: 5,\n//       markerWidth: 3,\n//       type: \"CURVE_SMOOTH\"\n//     },\n//   };\n\n//   const onClickNode = function (nodeId) {\n//     window.alert(`Clicked node ${nodeId}`);\n//   };\n\n//   const onClickLink = function (source, target) {\n//     window.alert(`Clicked link between ${source} and ${target}`);\n//   };\n\n//   return (\n//     <Graph\n//       id=\"graphId\"\n//       data={data}\n//       config={myConfig}\n//       onClickNode={onClickNode}\n//       onClickLink={onClickLink}\n//     />\n//   );\n// }\n\n// export default GraphComponent;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GraphComponent({\n  headers,\n  data\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const [circlePosition, setCirclePosition] = useState({\n    x: 100,\n    y: 100\n  });\n  const [isDragging, setIsDragging] = useState(false);\n  const [selectedVertex, setSelectedCircle] = useState(null);\n  const [vartexes, setvartexes] = useState([]);\n  const drawCircle = ctx => {\n    ctx.beginPath();\n    ctx.arc(circlePosition.x, circlePosition.y, 20, 0, Math.PI * 2); // придумать расположение\n    ctx.fillStyle = \"blue\";\n    ctx.fill();\n    ctx.closePath();\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    headers.forEach(drawCircle(ctx));\n  }, [headers, data]);\n  const handleMouseUp = () => {\n    setIsDragging(false);\n  };\n  const handleMouseDown = e => {\n    const rect = canvasRef.current.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    const distance = Math.sqrt((mouseX - circlePosition.x) * 2 + (mouseY - circlePosition.y) * 2);\n    if (distance < 20) {\n      // Если кликнули на круг\n      setIsDragging(true);\n    }\n  };\n  const handleMouseMove = e => {\n    if (isDragging) {\n      const rect = canvasRef.current.getBoundingClientRect();\n      let newX = e.clientX - rect.left;\n      let newY = e.clientY - rect.top;\n\n      // Ограничиваем перемещение круга границами canvas\n      newX = Math.max(20, Math.min(canvasRef.current.width - 20, newX));\n      newY = Math.max(20, Math.min(canvasRef.current.height - 20, newY));\n      setCirclePosition({\n        x: newX,\n        y: newY\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: \"800\",\n    height: \"600\",\n    onMouseDown: handleMouseDown,\n    onMouseMove: handleMouseMove,\n    onMouseUp: handleMouseUp\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n_s(GraphComponent, \"XMPuyTftRFLZ/x+74vzvOQ5nNjM=\");\n_c = GraphComponent;\nvar _c;\n$RefreshReg$(_c, \"GraphComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","GraphComponent","headers","data","_s","canvasRef","circlePosition","setCirclePosition","x","y","isDragging","setIsDragging","selectedVertex","setSelectedCircle","vartexes","setvartexes","drawCircle","ctx","beginPath","arc","Math","PI","fillStyle","fill","closePath","canvas","current","getContext","context","clearRect","width","height","forEach","handleMouseUp","handleMouseDown","e","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","distance","sqrt","handleMouseMove","newX","newY","max","min","ref","onMouseDown","onMouseMove","onMouseUp","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Users/admin/Desktop/graph_app/src/components/graph/GraphComponent.jsx"],"sourcesContent":["// import { Graph } from \"react-d3-graph\";\r\n\r\n// function GraphComponent() {\r\n//   const data = {\r\n//     nodes: [{ id: \"Harry\" }, { id: \"Sally\" }, { id: \"Alice\" }],\r\n//     links: [\r\n//       { source: \"Harry\", target: \"Sally\", weight: 5 , ma},\r\n//       { source: \"Harry\", target: \"Alice\" },\r\n//       { source: \"Sally\", target: \"Harry\", weight: 5 },\r\n//     ],\r\n//   };\r\n\r\n//   // the graph configuration, just override the ones you need\r\n//   const myConfig = {\r\n//     nodeHighlightBehavior: true,\r\n//     node: {\r\n//       color: \"black\",\r\n//       size: 220,\r\n//       highlightStrokeColor: \"red\",\r\n//     },\r\n//     link: {\r\n//       highlightColor: \"yellow\",\r\n//       renderLabel: true,\r\n//       labelProperty: \"weight\",\r\n//       markerHeight: 5,\r\n//       markerWidth: 3,\r\n//       type: \"CURVE_SMOOTH\"\r\n//     },\r\n//   };\r\n\r\n//   const onClickNode = function (nodeId) {\r\n//     window.alert(`Clicked node ${nodeId}`);\r\n//   };\r\n\r\n//   const onClickLink = function (source, target) {\r\n//     window.alert(`Clicked link between ${source} and ${target}`);\r\n//   };\r\n\r\n//   return (\r\n//     <Graph\r\n//       id=\"graphId\"\r\n//       data={data}\r\n//       config={myConfig}\r\n//       onClickNode={onClickNode}\r\n//       onClickLink={onClickLink}\r\n//     />\r\n//   );\r\n// }\r\n\r\n// export default GraphComponent;\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n\r\nexport default function GraphComponent({ headers, data }) {\r\n  const canvasRef = useRef(null);\r\n\r\n  const [circlePosition, setCirclePosition] = useState({ x: 100, y: 100 });\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [selectedVertex, setSelectedCircle] = useState(null);\r\n  const [vartexes, setvartexes] = useState([]);\r\n\r\n  const drawCircle = (ctx) => {\r\n    ctx.beginPath();\r\n    ctx.arc(circlePosition.x, circlePosition.y, 20, 0, Math.PI * 2);// придумать расположение\r\n    ctx.fillStyle = \"blue\";\r\n    ctx.fill();\r\n    ctx.closePath();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    headers.forEach(drawCircle(ctx));\r\n  }, [headers, data]);\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDragging(false);\r\n  };\r\n\r\n  const handleMouseDown = (e) => {\r\n    const rect = canvasRef.current.getBoundingClientRect();\r\n    const mouseX = e.clientX - rect.left;\r\n    const mouseY = e.clientY - rect.top;\r\n\r\n    const distance = Math.sqrt(\r\n      (mouseX - circlePosition.x) * 2 + (mouseY - circlePosition.y) * 2\r\n    );\r\n\r\n    if (distance < 20) {\r\n      // Если кликнули на круг\r\n      setIsDragging(true);\r\n    }\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (isDragging) {\r\n      const rect = canvasRef.current.getBoundingClientRect();\r\n      let newX = e.clientX - rect.left;\r\n      let newY = e.clientY - rect.top;\r\n\r\n      // Ограничиваем перемещение круга границами canvas\r\n      newX = Math.max(20, Math.min(canvasRef.current.width - 20, newX));\r\n      newY = Math.max(20, Math.min(canvasRef.current.height - 20, newY));\r\n\r\n      setCirclePosition({ x: newX, y: newY });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width=\"800\"\r\n      height=\"600\"\r\n      onMouseDown={handleMouseDown}\r\n      onMouseMove={handleMouseMove}\r\n      onMouseUp={handleMouseUp}\r\n    />\r\n  );\r\n}\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,eAAe,SAASC,cAAcA,CAAC;EAAEC,OAAO;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EACxD,MAAMC,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAE9B,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC;IAAEU,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAI,CAAC,CAAC;EACxE,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMkB,UAAU,GAAIC,GAAG,IAAK;IAC1BA,GAAG,CAACC,SAAS,CAAC,CAAC;IACfD,GAAG,CAACE,GAAG,CAACb,cAAc,CAACE,CAAC,EAAEF,cAAc,CAACG,CAAC,EAAE,EAAE,EAAE,CAAC,EAAEW,IAAI,CAACC,EAAE,GAAG,CAAC,CAAC,CAAC;IAChEJ,GAAG,CAACK,SAAS,GAAG,MAAM;IACtBL,GAAG,CAACM,IAAI,CAAC,CAAC;IACVN,GAAG,CAACO,SAAS,CAAC,CAAC;EACjB,CAAC;EAED5B,SAAS,CAAC,MAAM;IACd,MAAM6B,MAAM,GAAGpB,SAAS,CAACqB,OAAO;IAChC,MAAMT,GAAG,GAAGQ,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;IACnCC,OAAO,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEJ,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACM,MAAM,CAAC;IACpD7B,OAAO,CAAC8B,OAAO,CAAChB,UAAU,CAACC,GAAG,CAAC,CAAC;EAClC,CAAC,EAAE,CAACf,OAAO,EAAEC,IAAI,CAAC,CAAC;EAEnB,MAAM8B,aAAa,GAAGA,CAAA,KAAM;IAC1BtB,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,MAAMuB,eAAe,GAAIC,CAAC,IAAK;IAC7B,MAAMC,IAAI,GAAG/B,SAAS,CAACqB,OAAO,CAACW,qBAAqB,CAAC,CAAC;IACtD,MAAMC,MAAM,GAAGH,CAAC,CAACI,OAAO,GAAGH,IAAI,CAACI,IAAI;IACpC,MAAMC,MAAM,GAAGN,CAAC,CAACO,OAAO,GAAGN,IAAI,CAACO,GAAG;IAEnC,MAAMC,QAAQ,GAAGxB,IAAI,CAACyB,IAAI,CACxB,CAACP,MAAM,GAAGhC,cAAc,CAACE,CAAC,IAAI,CAAC,GAAG,CAACiC,MAAM,GAAGnC,cAAc,CAACG,CAAC,IAAI,CAClE,CAAC;IAED,IAAImC,QAAQ,GAAG,EAAE,EAAE;MACjB;MACAjC,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC;EAED,MAAMmC,eAAe,GAAIX,CAAC,IAAK;IAC7B,IAAIzB,UAAU,EAAE;MACd,MAAM0B,IAAI,GAAG/B,SAAS,CAACqB,OAAO,CAACW,qBAAqB,CAAC,CAAC;MACtD,IAAIU,IAAI,GAAGZ,CAAC,CAACI,OAAO,GAAGH,IAAI,CAACI,IAAI;MAChC,IAAIQ,IAAI,GAAGb,CAAC,CAACO,OAAO,GAAGN,IAAI,CAACO,GAAG;;MAE/B;MACAI,IAAI,GAAG3B,IAAI,CAAC6B,GAAG,CAAC,EAAE,EAAE7B,IAAI,CAAC8B,GAAG,CAAC7C,SAAS,CAACqB,OAAO,CAACI,KAAK,GAAG,EAAE,EAAEiB,IAAI,CAAC,CAAC;MACjEC,IAAI,GAAG5B,IAAI,CAAC6B,GAAG,CAAC,EAAE,EAAE7B,IAAI,CAAC8B,GAAG,CAAC7C,SAAS,CAACqB,OAAO,CAACK,MAAM,GAAG,EAAE,EAAEiB,IAAI,CAAC,CAAC;MAElEzC,iBAAiB,CAAC;QAAEC,CAAC,EAAEuC,IAAI;QAAEtC,CAAC,EAAEuC;MAAK,CAAC,CAAC;IACzC;EACF,CAAC;EAED,oBACEhD,OAAA;IACEmD,GAAG,EAAE9C,SAAU;IACfyB,KAAK,EAAC,KAAK;IACXC,MAAM,EAAC,KAAK;IACZqB,WAAW,EAAElB,eAAgB;IAC7BmB,WAAW,EAAEP,eAAgB;IAC7BQ,SAAS,EAAErB;EAAc;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC;AAEN;AAACtD,EAAA,CAlEuBH,cAAc;AAAA0D,EAAA,GAAd1D,cAAc;AAAA,IAAA0D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}