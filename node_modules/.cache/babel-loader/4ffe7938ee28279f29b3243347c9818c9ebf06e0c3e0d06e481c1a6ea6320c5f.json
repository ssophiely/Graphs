{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\admin\\\\Desktop\\\\graph_app\\\\src\\\\components\\\\graph\\\\GraphComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { generateCoordinates } from \"../../funcs/generateCoords\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GraphComponent({\n  headers,\n  data\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [selectedVertex, setSelectedVertex] = useState(null);\n  const [vertexes, setVertexes] = useState([]);\n  const [offset, setOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [names, setNames] = useState(headers);\n\n  // рисуем круг\n  const drawCircle = (vert, ctx) => {\n    ctx.beginPath();\n    ctx.arc(vert.x, vert.y, 20, 0, Math.PI * 2); // придумать расположение\n    ctx.fillStyle = \"blue\";\n    ctx.lineWidth = 2;\n    ctx.fill();\n    ctx.fillStyle = \"black\";\n    ctx.font = \"13px Serif\";\n    ctx.fillText(vert.label, vert.x, vert.y - vert.radius - 4);\n    ctx.closePath();\n  };\n\n  // рисуем стрелку\n  const drawArrow = (arr, ctx) => {\n    const fromPos = arr[0];\n    const toPos = arr[1];\n    if (fromPos && toPos) {\n      ctx.beginPath();\n      constnodeRadius = fromPos.radius;\n      const angle = Math.atan2(toPos.y - fromPos.y, toPos.x - fromPos.x);\n      const toX = toPos.x - nodeRadius * Math.cos(angle);\n      const toY = toPos.y - nodeRadius * Math.sin(angle);\n      const midX = (fromPos.x + toX) / 2;\n      const midY = (fromPos.y + toY) / 2;\n      const controlX = midX + (fromPos.y - toPos.y) / offset; // Отступ для закругления\n      const controlY = midY + (toPos.x - fromPos.x) / offset;\n      ctx.moveTo(from.x, from.y);\n      ctx.quadraticCurveTo(controlX, controlY, toX, toY);\n      ctx.stroke();\n      const arrowSize = 15;\n      ctx.beginPath();\n      ctx.moveTo(toX, toY);\n      ctx.lineTo(toX - arrowSize * Math.cos(angle - Math.PI / 6), toY - arrowSize * Math.sin(angle - Math.PI / 6));\n      ctx.lineTo(toX - arrowSize * Math.cos(angle + Math.PI / 6), toY - arrowSize * Math.sin(angle + Math.PI / 6));\n      ctx.closePath();\n      ctx.fill();\n    }\n  };\n  useEffect(() => {\n    // из таблицы удалили строку\n    if (headers.length !== names.length) {\n      let newVertexes = headers.map((h, ind) => {\n        if (h !== \"\") {\n          const vertex = vertexes.find(v => v.label === h);\n          if (vertex) {\n            vertex.id = ind;\n            return vertex;\n          }\n          console.log(\"error!\");\n        }\n        return null;\n      });\n      setNames(headers);\n      setVertexes(newVertexes.filter(el => el !== null));\n      console.log(newVertexes);\n      return;\n    }\n    let newVertexes = headers.map((h, ind) => {\n      if (h !== \"\") {\n        const vertex = vertexes.find(v => v.id === ind);\n        if (vertex) {\n          vertex.label = h;\n          return vertex;\n        }\n        let [xc, yc] = generateCoordinates(canvasRef.current, vertexes);\n        return {\n          label: h,\n          x: xc,\n          y: yc,\n          radius: 20,\n          id: ind\n        };\n      }\n      return null;\n    });\n    setVertexes(newVertexes.filter(el => el !== null));\n    setNames(headers);\n  }, [headers]);\n  useEffect(() => {}, [data]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    vertexes.forEach(item => {\n      drawCircle(item, ctx);\n    });\n    drawArrow(vertexes, ctx);\n  }, [vertexes]);\n  const handleMouseUp = () => {\n    setIsDragging(false);\n    setSelectedVertex(null);\n  };\n  const handleMouseDown = e => {\n    const mousePos = getMousePos(canvasRef.current, e);\n    console.log(mousePos, vertexes);\n    const clickedCircle = vertexes.find(circle => {\n      return (mousePos.x - circle.x) ** 2 + (mousePos.y - circle.y) ** 2 <= circle.radius ** 2;\n    });\n    console.log(clickedCircle);\n    if (clickedCircle) {\n      setIsDragging(true);\n      setSelectedVertex(clickedCircle);\n      setOffset({\n        x: mousePos.x - clickedCircle.x,\n        y: mousePos.y - clickedCircle.y\n      });\n    }\n  };\n  const handleMouseMove = e => {\n    if (isDragging && selectedVertex) {\n      const mousePos = getMousePos(canvasRef.current, e);\n      const newCircles = vertexes.map(circle => {\n        if (circle.label === selectedVertex.label) {\n          const newX = mousePos.x - offset.x;\n          const newY = mousePos.y - offset.y;\n          // Проверка границ\n          const radius = circle.radius;\n          if (newX - radius < 0) return {\n            ...circle,\n            x: radius\n          };\n          if (newY - radius < 0) return {\n            ...circle,\n            y: radius\n          };\n          if (newX + radius > canvasRef.current.width) return {\n            ...circle,\n            x: canvasRef.current.width - radius\n          };\n          if (newY + radius > canvasRef.current.height) return {\n            ...circle,\n            y: canvasRef.current.height - radius\n          };\n          return {\n            ...circle,\n            x: newX,\n            y: newY\n          };\n        }\n        return circle;\n      });\n      setVertexes(newCircles);\n    }\n  };\n  const getMousePos = (canvas, evt) => {\n    const rect = canvas.getBoundingClientRect();\n    return {\n      x: evt.clientX - rect.left,\n      y: evt.clientY - rect.top\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: \"880\",\n    height: \"600\",\n    onMouseDown: handleMouseDown,\n    onMouseMove: handleMouseMove,\n    onMouseUp: handleMouseUp\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n}\n_s(GraphComponent, \"rJ5znkpL4MiJtthQpB/wT6pHwYU=\");\n_c = GraphComponent;\nvar _c;\n$RefreshReg$(_c, \"GraphComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","generateCoordinates","jsxDEV","_jsxDEV","GraphComponent","headers","data","_s","canvasRef","isDragging","setIsDragging","selectedVertex","setSelectedVertex","vertexes","setVertexes","offset","setOffset","x","y","names","setNames","drawCircle","vert","ctx","beginPath","arc","Math","PI","fillStyle","lineWidth","fill","font","fillText","label","radius","closePath","drawArrow","arr","fromPos","toPos","constnodeRadius","angle","atan2","toX","nodeRadius","cos","toY","sin","midX","midY","controlX","controlY","moveTo","from","quadraticCurveTo","stroke","arrowSize","lineTo","length","newVertexes","map","h","ind","vertex","find","v","id","console","log","filter","el","xc","yc","current","canvas","getContext","clearRect","width","height","forEach","item","handleMouseUp","handleMouseDown","e","mousePos","getMousePos","clickedCircle","circle","handleMouseMove","newCircles","newX","newY","evt","rect","getBoundingClientRect","clientX","left","clientY","top","ref","onMouseDown","onMouseMove","onMouseUp","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Users/admin/Desktop/graph_app/src/components/graph/GraphComponent.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { generateCoordinates } from \"../../funcs/generateCoords\";\r\n\r\nexport default function GraphComponent({ headers, data }) {\r\n  const canvasRef = useRef(null);\r\n\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [selectedVertex, setSelectedVertex] = useState(null);\r\n  const [vertexes, setVertexes] = useState([]);\r\n  const [offset, setOffset] = useState({ x: 0, y: 0 });\r\n  const [names, setNames] = useState(headers);\r\n\r\n  // рисуем круг\r\n  const drawCircle = (vert, ctx) => {\r\n    ctx.beginPath();\r\n    ctx.arc(vert.x, vert.y, 20, 0, Math.PI * 2); // придумать расположение\r\n    ctx.fillStyle = \"blue\";\r\n    ctx.lineWidth = 2;\r\n    ctx.fill();\r\n\r\n    ctx.fillStyle = \"black\";\r\n    ctx.font = \"13px Serif\";\r\n    ctx.fillText(vert.label, vert.x, vert.y - vert.radius - 4);\r\n    ctx.closePath();\r\n  };\r\n\r\n  // рисуем стрелку\r\n  const drawArrow = (arr, ctx) => {\r\n    const fromPos = arr[0];\r\n    const toPos = arr[1];\r\n    if (fromPos && toPos) {\r\n      ctx.beginPath();\r\n      constnodeRadius = fromPos.radius;\r\n      const angle = Math.atan2(toPos.y - fromPos.y, toPos.x - fromPos.x);\r\n\r\n      const toX = toPos.x - nodeRadius * Math.cos(angle);\r\n      const toY = toPos.y - nodeRadius * Math.sin(angle);\r\n\r\n      const midX = (fromPos.x + toX) / 2;\r\n      const midY = (fromPos.y + toY) / 2;\r\n      const controlX = midX + (fromPos.y - toPos.y) / offset; // Отступ для закругления\r\n      const controlY = midY + (toPos.x - fromPos.x) / offset;\r\n\r\n      ctx.moveTo(from.x, from.y);\r\n      ctx.quadraticCurveTo(controlX, controlY, toX, toY);\r\n\r\n      ctx.stroke();\r\n\r\n      const arrowSize = 15;\r\n      ctx.beginPath();\r\n      ctx.moveTo(toX, toY);\r\n      ctx.lineTo(\r\n        toX - arrowSize * Math.cos(angle - Math.PI / 6),\r\n        toY - arrowSize * Math.sin(angle - Math.PI / 6)\r\n      );\r\n      ctx.lineTo(\r\n        toX - arrowSize * Math.cos(angle + Math.PI / 6),\r\n        toY - arrowSize * Math.sin(angle + Math.PI / 6)\r\n      );\r\n      ctx.closePath();\r\n      ctx.fill();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // из таблицы удалили строку\r\n    if (headers.length !== names.length) {\r\n      let newVertexes = headers.map((h, ind) => {\r\n        if (h !== \"\") {\r\n          const vertex = vertexes.find((v) => v.label === h);\r\n          if (vertex) {\r\n            vertex.id = ind;\r\n            return vertex;\r\n          }\r\n          console.log(\"error!\");\r\n        }\r\n        return null;\r\n      });\r\n      setNames(headers);\r\n      setVertexes(newVertexes.filter((el) => el !== null));\r\n      console.log(newVertexes);\r\n      return;\r\n    }\r\n\r\n    let newVertexes = headers.map((h, ind) => {\r\n      if (h !== \"\") {\r\n        const vertex = vertexes.find((v) => v.id === ind);\r\n        if (vertex) {\r\n          vertex.label = h;\r\n          return vertex;\r\n        }\r\n        let [xc, yc] = generateCoordinates(canvasRef.current, vertexes);\r\n        return {\r\n          label: h,\r\n          x: xc,\r\n          y: yc,\r\n          radius: 20,\r\n          id: ind,\r\n        };\r\n      }\r\n      return null;\r\n    });\r\n    setVertexes(newVertexes.filter((el) => el !== null));\r\n    setNames(headers);\r\n  }, [headers]);\r\n\r\n  useEffect(() => {}, [data]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    vertexes.forEach((item) => {\r\n      drawCircle(item, ctx);\r\n    });\r\n    drawArrow(vertexes, ctx);\r\n  }, [vertexes]);\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDragging(false);\r\n    setSelectedVertex(null);\r\n  };\r\n\r\n  const handleMouseDown = (e) => {\r\n    const mousePos = getMousePos(canvasRef.current, e);\r\n    console.log(mousePos, vertexes);\r\n    const clickedCircle = vertexes.find((circle) => {\r\n      return (\r\n        (mousePos.x - circle.x) ** 2 + (mousePos.y - circle.y) ** 2 <=\r\n        circle.radius ** 2\r\n      );\r\n    });\r\n    console.log(clickedCircle);\r\n    if (clickedCircle) {\r\n      setIsDragging(true);\r\n      setSelectedVertex(clickedCircle);\r\n      setOffset({\r\n        x: mousePos.x - clickedCircle.x,\r\n        y: mousePos.y - clickedCircle.y,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (isDragging && selectedVertex) {\r\n      const mousePos = getMousePos(canvasRef.current, e);\r\n      const newCircles = vertexes.map((circle) => {\r\n        if (circle.label === selectedVertex.label) {\r\n          const newX = mousePos.x - offset.x;\r\n          const newY = mousePos.y - offset.y;\r\n          // Проверка границ\r\n          const radius = circle.radius;\r\n          if (newX - radius < 0) return { ...circle, x: radius };\r\n          if (newY - radius < 0) return { ...circle, y: radius };\r\n          if (newX + radius > canvasRef.current.width)\r\n            return { ...circle, x: canvasRef.current.width - radius };\r\n          if (newY + radius > canvasRef.current.height)\r\n            return { ...circle, y: canvasRef.current.height - radius };\r\n\r\n          return { ...circle, x: newX, y: newY };\r\n        }\r\n        return circle;\r\n      });\r\n\r\n      setVertexes(newCircles);\r\n    }\r\n  };\r\n\r\n  const getMousePos = (canvas, evt) => {\r\n    const rect = canvas.getBoundingClientRect();\r\n    return {\r\n      x: evt.clientX - rect.left,\r\n      y: evt.clientY - rect.top,\r\n    };\r\n  };\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width=\"880\"\r\n      height=\"600\"\r\n      onMouseDown={handleMouseDown}\r\n      onMouseMove={handleMouseMove}\r\n      onMouseUp={handleMouseUp}\r\n    />\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}