{"ast":null,"code":"const attemptsLimit = 1000;\nconst radius = 20;\nexport function getMousePos(canvas, evt) {\n  const rect = canvas.getBoundingClientRect();\n  return {\n    x: evt.clientX - rect.left,\n    y: evt.clientY - rect.top\n  };\n}\nexport function generateCoordinates(canvas, circles) {\n  let attempts = 0;\n  while (attempts < attemptsLimit) {\n    attempts++;\n    const x = Math.random() * (canvas.width - 2 * radius) + radius;\n    const y = Math.random() * (canvas.height - 2 * radius) + radius;\n    const newCircle = {\n      x,\n      y,\n      radius\n    };\n    if (!isOverlapping(newCircle, circles)) {\n      return [x, y];\n    }\n  }\n  return [null, null];\n}\nfunction isOverlapping(newCircle, circles) {\n  for (const circle of circles) {\n    const dx = newCircle.x - circle.x;\n    const dy = newCircle.y - circle.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    if (distance < newCircle.radius + circle.radius) {\n      return true; // круги перекрываются\n    }\n  }\n  return false; // круги не перекрываются\n}","map":{"version":3,"names":["attemptsLimit","radius","getMousePos","canvas","evt","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","generateCoordinates","circles","attempts","Math","random","width","height","newCircle","isOverlapping","circle","dx","dy","distance","sqrt"],"sources":["D:/Users/admin/Desktop/graph_app/src/funcs/generateCoords.js"],"sourcesContent":["const attemptsLimit = 1000;\r\nconst radius = 20;\r\n\r\nexport function getMousePos(canvas, evt) {\r\n  const rect = canvas.getBoundingClientRect();\r\n  return {\r\n    x: evt.clientX - rect.left,\r\n    y: evt.clientY - rect.top,\r\n  };\r\n}\r\n\r\nexport function generateCoordinates(canvas, circles) {\r\n  let attempts = 0;\r\n\r\n  while (attempts < attemptsLimit) {\r\n    attempts++;\r\n    const x = Math.random() * (canvas.width - 2 * radius) + radius;\r\n    const y = Math.random() * (canvas.height - 2 * radius) + radius;\r\n\r\n    const newCircle = { x, y, radius };\r\n\r\n    if (!isOverlapping(newCircle, circles)) {\r\n      return [x, y];\r\n    }\r\n  }\r\n\r\n  return [null, null];\r\n}\r\n\r\nfunction isOverlapping(newCircle, circles) {\r\n  for (const circle of circles) {\r\n    const dx = newCircle.x - circle.x;\r\n    const dy = newCircle.y - circle.y;\r\n    const distance = Math.sqrt(dx * dx + dy * dy);\r\n    if (distance < newCircle.radius + circle.radius) {\r\n      return true; // круги перекрываются\r\n    }\r\n  }\r\n  return false; // круги не перекрываются\r\n}\r\n"],"mappings":"AAAA,MAAMA,aAAa,GAAG,IAAI;AAC1B,MAAMC,MAAM,GAAG,EAAE;AAEjB,OAAO,SAASC,WAAWA,CAACC,MAAM,EAAEC,GAAG,EAAE;EACvC,MAAMC,IAAI,GAAGF,MAAM,CAACG,qBAAqB,CAAC,CAAC;EAC3C,OAAO;IACLC,CAAC,EAAEH,GAAG,CAACI,OAAO,GAAGH,IAAI,CAACI,IAAI;IAC1BC,CAAC,EAAEN,GAAG,CAACO,OAAO,GAAGN,IAAI,CAACO;EACxB,CAAC;AACH;AAEA,OAAO,SAASC,mBAAmBA,CAACV,MAAM,EAAEW,OAAO,EAAE;EACnD,IAAIC,QAAQ,GAAG,CAAC;EAEhB,OAAOA,QAAQ,GAAGf,aAAa,EAAE;IAC/Be,QAAQ,EAAE;IACV,MAAMR,CAAC,GAAGS,IAAI,CAACC,MAAM,CAAC,CAAC,IAAId,MAAM,CAACe,KAAK,GAAG,CAAC,GAAGjB,MAAM,CAAC,GAAGA,MAAM;IAC9D,MAAMS,CAAC,GAAGM,IAAI,CAACC,MAAM,CAAC,CAAC,IAAId,MAAM,CAACgB,MAAM,GAAG,CAAC,GAAGlB,MAAM,CAAC,GAAGA,MAAM;IAE/D,MAAMmB,SAAS,GAAG;MAAEb,CAAC;MAAEG,CAAC;MAAET;IAAO,CAAC;IAElC,IAAI,CAACoB,aAAa,CAACD,SAAS,EAAEN,OAAO,CAAC,EAAE;MACtC,OAAO,CAACP,CAAC,EAAEG,CAAC,CAAC;IACf;EACF;EAEA,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;AACrB;AAEA,SAASW,aAAaA,CAACD,SAAS,EAAEN,OAAO,EAAE;EACzC,KAAK,MAAMQ,MAAM,IAAIR,OAAO,EAAE;IAC5B,MAAMS,EAAE,GAAGH,SAAS,CAACb,CAAC,GAAGe,MAAM,CAACf,CAAC;IACjC,MAAMiB,EAAE,GAAGJ,SAAS,CAACV,CAAC,GAAGY,MAAM,CAACZ,CAAC;IACjC,MAAMe,QAAQ,GAAGT,IAAI,CAACU,IAAI,CAACH,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;IAC7C,IAAIC,QAAQ,GAAGL,SAAS,CAACnB,MAAM,GAAGqB,MAAM,CAACrB,MAAM,EAAE;MAC/C,OAAO,IAAI,CAAC,CAAC;IACf;EACF;EACA,OAAO,KAAK,CAAC,CAAC;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}