{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\admin\\\\Desktop\\\\\\u0433\\u0440\\u0430\\u0444\\u044B\\\\graph_app\\\\src\\\\components\\\\graph_info\\\\Matrix.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Matrix = ({\n  count\n}) => {\n  _s();\n  const vertexNames = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n\n  // Заголовки столбцов и строк\n  let columnHeaders = vertexNames.slice(0, count);\n  let rowHeaders = [...columnHeaders];\n  const [data, setData] = useState([...Array(count)].map(e => Array(count).fill(\"\")));\n\n  // Обработчик изменения значения в ячейке\n  const handleChange = (rowIndex, colIndex, value) => {\n    const newData = data.map((row, rIdx) => {\n      if (rIdx === rowIndex) {\n        const newRow = [...row];\n        newRow[colIndex] = value;\n        return newRow;\n      }\n      return row;\n    });\n    setData(newData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    border: \"1\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), columnHeaders.map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: header\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: data.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: rowHeaders[rowIndex]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), row.map((cell, colIndex) => {\n          let flag = /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: cell,\n              readOnly: rowIndex === colIndex ? true : false,\n              onChange: e => handleChange(rowIndex, colIndex, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 25\n            }, this)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 23\n          }, this);\n        })]\n      }, rowIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(Matrix, \"mVt/tZ+9Dr0XRdYfcqup9YWjXlk=\");\n_c = Matrix;\nexport default Matrix;\nvar _c;\n$RefreshReg$(_c, \"Matrix\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Matrix","count","_s","vertexNames","columnHeaders","slice","rowHeaders","data","setData","Array","map","e","fill","handleChange","rowIndex","colIndex","value","newData","row","rIdx","newRow","border","children","fileName","_jsxFileName","lineNumber","columnNumber","header","index","cell","flag","type","readOnly","onChange","target","_c","$RefreshReg$"],"sources":["D:/Users/admin/Desktop/графы/graph_app/src/components/graph_info/Matrix.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Matrix = ({ count }) => {\r\n  const vertexNames = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\r\n\r\n  // Заголовки столбцов и строк\r\n  let columnHeaders = vertexNames.slice(0, count);\r\n  let rowHeaders = [...columnHeaders];\r\n\r\n  const [data, setData] = useState(\r\n    [...Array(count)].map((e) => Array(count).fill(\"\"))\r\n  );\r\n\r\n  // Обработчик изменения значения в ячейке\r\n  const handleChange = (rowIndex, colIndex, value) => {\r\n    const newData = data.map((row, rIdx) => {\r\n      if (rIdx === rowIndex) {\r\n        const newRow = [...row];\r\n        newRow[colIndex] = value;\r\n        return newRow;\r\n      }\r\n      return row;\r\n    });\r\n    setData(newData);\r\n  };\r\n\r\n  return (\r\n    <table border=\"1\">\r\n      <thead>\r\n        <tr>\r\n          <th></th>\r\n          {/* Пустая ячейка для заголовка строки */}\r\n          {columnHeaders.map((header, index) => (\r\n            <th key={index}>{header}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {data.map((row, rowIndex) => (\r\n          <tr key={rowIndex}>\r\n            <td>{rowHeaders[rowIndex]}</td>\r\n            {row.map((cell, colIndex) => {\r\n              let flag =\r\n                (\r\n                      <td key={colIndex}>\r\n                        <input\r\n                          type=\"text\"\r\n                          value={cell}\r\n                          readOnly={rowIndex === colIndex\r\n                  ? true\r\n                  : false}\r\n                          onChange={(e) =>\r\n                            handleChange(rowIndex, colIndex, e.target.value)\r\n                          }\r\n                        />\r\n                      </td>\r\n                    );\r\n            })}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Matrix;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}