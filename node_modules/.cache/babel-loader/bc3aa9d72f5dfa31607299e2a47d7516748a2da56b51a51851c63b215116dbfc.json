{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\admin\\\\Desktop\\\\\\u0433\\u0440\\u0430\\u0444\\u044B\\\\graph_app\\\\src\\\\components\\\\graph_info\\\\MatrixComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport Matrix from \"./Matrix.jsx\";\nimport Header from \"./Header.jsx\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MatrixComponent() {\n  _s();\n  const [vertexCount, setVertexCount] = useState(5);\n  const input = useRef();\n  const [columnHeaders, setColumnHeaders] = useState(Array.from({\n    length: vertexCount\n  }, () => \"\"));\n  const [rowHeaders, setRowHeaders] = useState(Array.from({\n    length: vertexCount\n  }, () => \"\"));\n  const [data, setData] = useState([...Array(vertexCount)].map(e => Array(vertexCount).fill(\"\")));\n\n  // Обработчик изменения значения в ячейке\n  const handleChange = (rowIndex, colIndex, value) => {\n    const newData = data.map((row, rIdx) => {\n      if (rIdx === rowIndex) {\n        const newRow = [...row];\n        newRow[colIndex] = value;\n        return newRow;\n      }\n      return row;\n    });\n    setData(newData);\n  };\n  function handleClick() {\n    let value = input.current.value;\n    value = value < 2 ? 2 : value;\n    value = value > 10 ? 10 : value;\n    setVertexCount(value);\n    setColumnHeaders(Array.from({\n      length: value\n    }, () => \"\"));\n    setRowHeaders(Array.from({\n      length: value\n    }, () => \"\"));\n    setData(Array.from({\n      length: value\n    }, () => Array.from({\n      length: value\n    }, () => \"\")));\n    input.current.value = value;\n  }\n  function handleDelete(i) {\n    const newRows = rowHeaders.filter(v => v != rowHeaders[i]);\n    setRowHeaders(newRows);\n    const newCols = columnHeaders.filter(v => v != columnHeaders[i]);\n    setColumnHeaders(newCols);\n    let x = data.map(innerArray => innerArray.slice());\n    console.log(x);\n    x.splice(i, 1);\n    console.log(x);\n    for (let i = 0; i < array.length; i++) {\n      array[i].splice(colIndex, 1);\n    }\n  }\n  function handleInsert(i) {\n    console.log(i);\n  }\n  function handleInput(value, index) {\n    const newHeaders = rowHeaders.slice();\n    newHeaders[index] = value;\n    setRowHeaders(newHeaders);\n    setColumnHeaders(newHeaders);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      input: input,\n      vertexCount: vertexCount,\n      onClickHandler: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Matrix, {\n      columnHeaders: columnHeaders,\n      rowHeaders: rowHeaders,\n      data: data,\n      onChange: handleChange,\n      onInput: handleInput,\n      onDelete: handleDelete,\n      onInsert: handleInsert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(MatrixComponent, \"UyJGGevRJku0JfczVSn1UO4ac4k=\");\n_c = MatrixComponent;\nvar _c;\n$RefreshReg$(_c, \"MatrixComponent\");","map":{"version":3,"names":["React","useState","useRef","Matrix","Header","jsxDEV","_jsxDEV","Fragment","_Fragment","MatrixComponent","_s","vertexCount","setVertexCount","input","columnHeaders","setColumnHeaders","Array","from","length","rowHeaders","setRowHeaders","data","setData","map","e","fill","handleChange","rowIndex","colIndex","value","newData","row","rIdx","newRow","handleClick","current","handleDelete","i","newRows","filter","v","newCols","x","innerArray","slice","console","log","splice","array","handleInsert","handleInput","index","newHeaders","children","onClickHandler","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onInput","onDelete","onInsert","_c","$RefreshReg$"],"sources":["D:/Users/admin/Desktop/графы/graph_app/src/components/graph_info/MatrixComponent.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport Matrix from \"./Matrix.jsx\";\r\nimport Header from \"./Header.jsx\";\r\n\r\nexport default function MatrixComponent() {\r\n  const [vertexCount, setVertexCount] = useState(5);\r\n  const input = useRef();\r\n\r\n  const [columnHeaders, setColumnHeaders] = useState(\r\n    Array.from({ length: vertexCount }, () => \"\")\r\n  );\r\n  const [rowHeaders, setRowHeaders] = useState(\r\n    Array.from({ length: vertexCount }, () => \"\")\r\n  );\r\n  const [data, setData] = useState(\r\n    [...Array(vertexCount)].map((e) => Array(vertexCount).fill(\"\"))\r\n  );\r\n\r\n  // Обработчик изменения значения в ячейке\r\n  const handleChange = (rowIndex, colIndex, value) => {\r\n    const newData = data.map((row, rIdx) => {\r\n      if (rIdx === rowIndex) {\r\n        const newRow = [...row];\r\n        newRow[colIndex] = value;\r\n        return newRow;\r\n      }\r\n      return row;\r\n    });\r\n    setData(newData);\r\n  };\r\n\r\n  function handleClick() {\r\n    let value = input.current.value;\r\n    value = value < 2 ? 2 : value;\r\n    value = value > 10 ? 10 : value;\r\n\r\n    setVertexCount(value);\r\n    setColumnHeaders(Array.from({ length: value }, () => \"\"));\r\n    setRowHeaders(Array.from({ length: value }, () => \"\"));\r\n    setData(\r\n      Array.from({ length: value }, () =>\r\n        Array.from({ length: value }, () => \"\")\r\n      )\r\n    );\r\n\r\n    input.current.value = value;\r\n  }\r\n\r\n  function handleDelete(i) {\r\n    const newRows = rowHeaders.filter((v) => v != rowHeaders[i]);\r\n    setRowHeaders(newRows);\r\n\r\n    const newCols = columnHeaders.filter((v) => v != columnHeaders[i]);\r\n    setColumnHeaders(newCols);\r\n\r\n    let x = data.map((innerArray) => innerArray.slice());\r\n    console.log(x);\r\n    x.splice(i, 1);\r\n    console.log(x);\r\n    for (let i = 0; i < array.length; i++) {\r\n      array[i].splice(colIndex, 1);\r\n    }\r\n  }\r\n\r\n  function handleInsert(i) {\r\n    console.log(i);\r\n  }\r\n\r\n  function handleInput(value, index) {\r\n    const newHeaders = rowHeaders.slice();\r\n    newHeaders[index] = value;\r\n    setRowHeaders(newHeaders);\r\n    setColumnHeaders(newHeaders);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header\r\n        input={input}\r\n        vertexCount={vertexCount}\r\n        onClickHandler={handleClick}\r\n      />\r\n      <Matrix\r\n        columnHeaders={columnHeaders}\r\n        rowHeaders={rowHeaders}\r\n        data={data}\r\n        onChange={handleChange}\r\n        onInput={handleInput}\r\n        onDelete={handleDelete}\r\n        onInsert={handleInsert}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}