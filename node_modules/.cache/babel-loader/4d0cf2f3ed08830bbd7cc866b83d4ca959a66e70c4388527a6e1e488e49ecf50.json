{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport Matrix from \"./Matrix.jsx\";\nimport Header from \"./Header.jsx\";\nexport default function MatrixComponent() {\n  _s();\n  const [vertexCount, setVertexCount] = useState(5);\n  const input = useRef();\n  const vertexNames = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n  const [columnHeaders, setColumnHeaders] = useState(Array.from({\n    length: vertexCount\n  }, () => \"\"));\n  const [rowHeaders, setRowHeaders] = useState(Array.from({\n    length: vertexCount\n  }, () => \"\"));\n  const [data, setData] = useState([...Array(vertexCount)].map(e => Array(vertexCount).fill(\"\")));\n\n  // Обработчик изменения значения в ячейке\n  const handleChange = (rowIndex, colIndex, value) => {\n    const newData = data.map((row, rIdx) => {\n      if (rIdx === rowIndex) {\n        const newRow = [...row];\n        newRow[colIndex] = value;\n        return newRow;\n      }\n      return row;\n    });\n    setData(newData);\n  };\n  function handleClick() {\n    let value = input.current.value;\n    value = value < 2 ? 2 : value;\n    value = value > 10 ? 10 : value;\n    setVertexCount(value);\n    setColumnHeaders(vertexNames.slice(0, value));\n    setRowHeaders(vertexNames.slice(0, value));\n    setData(Array.from({\n      length: value\n    }, () => Array.from({\n      length: value\n    }, () => \"\")));\n    input.current.value = value;\n  }\n  function handleInput({\n    value,\n    index\n  }) {\n    const newHeaders = rowHeaders.slice();\n    newHeaders[index] = value;\n    setRowHeaders(newHeaders);\n    setColumnHeaders(newHeaders);\n  }\n}\n_s(MatrixComponent, \"UyJGGevRJku0JfczVSn1UO4ac4k=\");\n_c = MatrixComponent;\nvar _c;\n$RefreshReg$(_c, \"MatrixComponent\");","map":{"version":3,"names":["React","useState","useRef","Matrix","Header","MatrixComponent","_s","vertexCount","setVertexCount","input","vertexNames","columnHeaders","setColumnHeaders","Array","from","length","rowHeaders","setRowHeaders","data","setData","map","e","fill","handleChange","rowIndex","colIndex","value","newData","row","rIdx","newRow","handleClick","current","slice","handleInput","index","newHeaders","_c","$RefreshReg$"],"sources":["D:/Users/admin/Desktop/графы/graph_app/src/components/graph_info/MatrixComponent.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport Matrix from \"./Matrix.jsx\";\r\nimport Header from \"./Header.jsx\";\r\n\r\nexport default function MatrixComponent() {\r\n  const [vertexCount, setVertexCount] = useState(5);\r\n  const input = useRef();\r\n\r\n  const vertexNames = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\r\n  const [columnHeaders, setColumnHeaders] = useState(\r\n    Array.from({ length: vertexCount }, () => \"\")\r\n  );\r\n  const [rowHeaders, setRowHeaders] = useState(\r\n    Array.from({ length: vertexCount }, () => \"\")\r\n  );\r\n  const [data, setData] = useState(\r\n    [...Array(vertexCount)].map((e) => Array(vertexCount).fill(\"\"))\r\n  );\r\n\r\n  \r\n\r\n  // Обработчик изменения значения в ячейке\r\n  const handleChange = (rowIndex, colIndex, value) => {\r\n    const newData = data.map((row, rIdx) => {\r\n      if (rIdx === rowIndex) {\r\n        const newRow = [...row];\r\n        newRow[colIndex] = value;\r\n        return newRow;\r\n      }\r\n      return row;\r\n    });\r\n    setData(newData);\r\n  };\r\n\r\n  function handleClick() {\r\n    let value = input.current.value;\r\n    value = value < 2 ? 2 : value;\r\n    value = value > 10 ? 10 : value;\r\n\r\n    setVertexCount(value);\r\n    setColumnHeaders(vertexNames.slice(0, value));\r\n    setRowHeaders(vertexNames.slice(0, value));\r\n    setData(\r\n      Array.from({ length: value }, () =>\r\n        Array.from({ length: value }, () => \"\")\r\n      )\r\n    );\r\n\r\n    input.current.value = value;\r\n  }\r\n\r\n  function handleInput({ value, index }) {\r\n    const newHeaders = rowHeaders.slice();\r\n    newHeaders[index] = value;\r\n    setRowHeaders(newHeaders);\r\n    setColumnHeaders(newHeaders);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}